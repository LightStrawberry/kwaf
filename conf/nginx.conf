worker_processes  4;        #nginx worker 数量
error_log logs/error.log info;   #指定错误日志文件路径
events {
    worker_connections 2048;
}

http {
    keepalive_timeout 65;
    gzip on;
    lua_shared_dict rule_cache 128m;

    lua_package_path '$prefix/lua/?.lua;/blah/?.lua;;';

    # set_by_lua 流程分支处理判断变量初始化
    # rewrite_by_lua*: 转发、重定向、缓存等功能(例如特定请求代理到外网)
    # access_by_lua*: IP 准入、接口权限等情况集中处理(例如配合 iptable 完成简单防火墙)
    # content_by_lua*: 内容生成
    # header_filter_by_lua*: 响应头部过滤处理(例如添加头部信息)
    # body_filter_by_lua*: 响应体过滤处理(例如完成应答内容统一成大写)
    # log_by_lua*: 会话完成后本地异步完成日志记录(日志可以记录在本地，还可以同步到其他机器)

    access_by_lua_file 'lua/waf.lua';

    init_by_lua_file 'lua/init.lua';

    body_filter_by_lua_file 'lua/body_filter.lua';

    log_by_lua_file 'lua/log.lua';
    # 避免每次修改都要reload
    lua_code_cache off;

    client_body_buffer_size     10M;
    client_max_body_size        10M;

    server {
        #监听端口，若你的6699端口已经被占用，则需要修改
        listen 6699;

        # 需要打开读取body
        # lua_need_request_body on;

        location / {
            default_type text/html;
            content_by_lua_block {
                ngx.say("HelloWorld")
                ngx.log(ngx.INFO, "test log")
            }
        }

        location /a {
            default_type text/html;
            content_by_lua_block {
                ngx.say('<form id="upload-form" action="upload.php" method="post" enctype="multipart/form-data" ><input type="file" id="upload" name="upload" /> <br /><input type="submit" value="Upload" /></form>')
            }
        }

        location /c {
            default_type text/html;
            content_by_lua_block {
                ngx.say('safh42011519950801581Xff                15623790518')
            }
        }

        location = /sum {
            # 只允许内部调用
            internal;
            # 这里做了一个求和运算只是一个例子，可以在这里完成一些数据库、
            # 缓存服务器的操作，达到基础模块和业务逻辑分离目的
            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                ngx.say(tonumber(args.a) + tonumber(args.b))
            }
        }
    }
}
