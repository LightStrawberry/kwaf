worker_processes  1;        #nginx worker 数量
error_log logs/error.log info;   #指定错误日志文件路径
events {
    worker_connections 1024;
}

http {

    lua_package_path '$prefix/lua/?.lua;/blah/?.lua;;';

    access_by_lua_file 'lua/waf.lua';

    init_by_lua_file 'lua/init.lua';
    # 避免每次修改都要reload
    lua_code_cache off;

    server {
        #监听端口，若你的6699端口已经被占用，则需要修改
        listen 6699;
        # lua_need_request_body on;

        location / {
            default_type text/html;
            content_by_lua_block {
                ngx.log(ngx.ERR, "num", 333)
                ngx.log(ngx.INFO, " string", 331)
                ngx.say("HelloWorld")
            }
        }
        location /print_param {
            content_by_lua_block {
                local arg = ngx.req.get_uri_args()
                for k, v in pairs(arg) do
                    ngx.say("[GET] key:", k, " v:", v)
                end
            }
        }
        location /test {
            content_by_lua_block {
                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                ngx.say('hello ', data)
            }
        }
        location /sum {
            access_by_lua_block {
                local black_ips = {['127.0.0.1']=true}

                local ip = ngx.var.remote_addr
                if true == black_ips[ip] then
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end
            }

            content_by_lua_block {
                local a = tonumber(ngx.var.arg_a) or 0
                local b = tonumber(ngx.var.arg_b) or 0
                ngx.say("sum:", a + b )
            }
        }
    }
}
